<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liu.dao.StudentMapper" >
  <resultMap id="BaseResultMap" type="Student" >
    <id column="student_id" property="studentId" jdbcType="BIGINT" />
    <result column="student_name" property="studentName" jdbcType="VARCHAR" />
    <result column="student_grade" property="studentGrade" jdbcType="INTEGER" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="sex" property="sex" jdbcType="TINYINT" />
    <result column="department" property="department" jdbcType="INTEGER" />
    <result column="is_regist" property="isRegist" jdbcType="TINYINT" />
    <result column="is_delete" property="isDelete" jdbcType="TINYINT" />
    <result column="login_time" property="loginTime" jdbcType="TIMESTAMP" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >

    student_id, student_name, student_grade, password, age, sex, department, is_regist, is_delete,
    login_time, create_time
  </sql>
  <insert id="insertSelective" parameterType="Student" >
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="studentName != null" >
        student_name,
      </if>
      <if test="studentGrade != null" >
        student_grade,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="age != null" >
        age,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="department != null" >
        department,
      </if>
      <if test="isRegist != null" >
        is_regist,
      </if>
      <if test="isDelete != null" >
        is_delete,
      </if>
      <if test="loginTime != null" >
        login_time,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="studentName != null" >
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentGrade != null" >
        #{studentGrade,jdbcType=INTEGER},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        #{age,jdbcType=INTEGER},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=TINYINT},
      </if>
      <if test="department != null" >
        #{department,jdbcType=INTEGER},
      </if>
      <if test="isRegist != null" >
        #{isRegist,jdbcType=TINYINT},
      </if>
      <if test="isDelete != null" >
        #{isDelete,jdbcType=TINYINT},
      </if>
      <if test="loginTime != null" >
        #{loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="Student" >
    update student
    <set >
      <if test="studentName != null" >
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentGrade != null" >
        student_grade = #{studentGrade,jdbcType=INTEGER},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=TINYINT},
      </if>
      <if test="department != null" >
        department = #{department,jdbcType=INTEGER},
      </if>
      <if test="isRegist != null" >
        is_regist = #{isRegist,jdbcType=TINYINT},
      </if>
      <if test="loginTime != null" >
        login_time = #{loginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where student_id = #{studentId,jdbcType=BIGINT}
  </update>
  <select id="getStudentById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
        <include refid="Base_Column_List"/>
    from student
    where student_id = #{studentId}
  </select>
  <select id="getStudentPages" resultMap="BaseResultMap" parameterType="map">
    select
    <include refid="Base_Column_List"/>
    from student
    where is_regist =
    <choose>
      <when test="isRegist != null">
        #{isRegist}
      </when>
      <otherwise>
        1
      </otherwise>
    </choose>
    and is_delete = 0
    <if test="limit != null and page != null">
      limit #{limit} offset #{start}
    </if>
  </select>
  <select id="getCounts" parameterType="map" resultType="int">
    select count(*)
    from student
    where is_regist =
      <choose>
        <when test="isRegist != null">
          #{isRegist}
        </when>
        <otherwise>
          1
        </otherwise>
      </choose>
    and is_delete = 0;
  </select>
  <update id="BatchDelete" parameterType="long">
    update student
    set  is_delete = 1
    where student_id in
    <foreach collection="array" separator="," open="(" close=")" item="studentId">
      #{studentId}
    </foreach>
  </update>
  <update id="BatchConfirm" parameterType="long">
    update student
    set  student.is_regist = 1
    where student_id in
    <foreach collection="array" separator="," open="(" close=")" item="studentId">
      #{studentId}
    </foreach>
  </update>
</mapper>